---
layout: post
title: gcc常见用法
categories: linux
comments: true
---
今天在使用gcc的时候觉得自己对它的了解还是不够系统,所以在这里对gcc常见的用法进行一下总结.

### 1. 简单编译

gcc main.c -o main 这样一条命令可以将一个main.c文件直接生成为可运行的可执行文件main,其中隐含了很多细节.

整个过程需要经过4个步骤:预处理,编译,汇编,链接.

- 预处理:
  ```
   gcc -E main.c -o main.i
  ```
- 编译为汇编代码:
   ```
   gcc -S main.i -o main.s
   ```
- 汇编(as): 
   ```
   gcc -c main.s -o main.o
   ```
- 链接(ld): 
  ```
   gcc main.o -o main
  ```

在命令行中执行./main即可得到执行结果.

### 2. 检错
作为一名程序员不能忽视警告的存在,所以通过以下命令将程序执行过程的警告全部显示出来.

```
gcc -Wall main.c -o main
```

在编译程序时带上-Werror选项，那么gcc会把所有警告转换为错误,在产生警告的地方停止编译

```
gcc -Werror main.c -o main
```

### 3. 库文件
库是一组预先编译好的函数的集合,这些函数是按照可重用的原则编写的.标准系统库文件一般存储在/lib和/usr/lib目录下.

#### 3.1 库文件链接 

```
gcc main.o libc.a -o main   表示链接处在标准位置的库文件
```

```
gcc main.o -L. -lfoo -o main
```

若库文件不在标准位置,需要-L来指定目录,由于库文件均是以lib开头,用-l+去掉lib后面的文件名来指定想要链接的库文件,以上命令表示链接当前目录下的libfoo.a文件.

#### 3.2 自己创建库文件

```
ar crv libfoo.a bill.o fred.o    这样libfoo.a将包含2个目标文件
```

#### 3.3 静态库与动态库(共享库)

静态库是在编译时链接,包含在生成的可执行文件中,当有多处调用时会出现多个副本,这样会造成空间的浪费.而动态库则是运行时再链接.

- linux:    .a (静态)           .so (动态)

- windows:  .LIB (静态)         .DLL (动态)

```
ldd main    可查看程序需要的动态库有哪些
```

默认情况下gcc会优先调用动态库,使用-static可强制为静态链接.

```
gcc main.o -static -o main
```

PS: 可使用man gcc 或者 info gcc 更详细的了解gcc的是使用





